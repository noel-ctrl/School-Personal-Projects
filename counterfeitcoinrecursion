package counterfeitcoinrecursion;

/**
Prompt: Suppose we have 9 identical looking coins numbered 1 through 9 and only 1 of the coins is heavier
* than the others. Suppose further you have a balance scale and are allowed two weighings. Develop a method
* for finding the heavier counterfeit coin given these constraints.
* 
* Suppose now we have an integer n (represents n coins) and only one of the coins is heavier
* than the others. Suppose further that n is a power of 3 and you have log(base3)(n) weighings
* to determine the heavier coin. Write an algorithm that solves this problem.
 */
import java.util.Arrays;
import java.util.Scanner;
public class CounterfeitCoinRecursion {

    public static int heavyCoin(int a[]){

        int n = a.length;
        //base case is if we are looking at only 3 coins. we need to figure out
        //what position the heavier coin is at and return that index
        if(n == 3){
            if (a[0]>a[1]) {
                return 0;
            }
            else if (a[0]<a[1]) {
                return 1;
            }
            else{
                return 2;
            }
        }

        int g1sum = addS(a, 0);
        int g2sum = addS(a, n);
        
        
        if(g1sum > g2sum){
            int g1[] = Arrays.copyOfRange(a, 0, n/3); //runs n/3 times
            return heavyCoin(g1);//since g1 is the first group of coins there are
            //no other groups of coins before it
        }
        
        else if(g1sum < g2sum){
            int g2[] = Arrays.copyOfRange(a, n/3, 2*(n/3)); //runs n/3 times
            return heavyCoin(g2)+(n/3);//then recursively we will go back up the 
            //branch and add up how many coins are before it. since g2sum has the heavier coin
            //we recurse using that group and add the length of the groups before it
        }
        else{
            int g3[] = Arrays.copyOfRange(a, 2*(n/3), n); //runs n/3 times
            return heavyCoin(g3)+2*(n/3);//we do the same thing here but add the
            //2 lengths of the 2 groups before the group we are looking at
        }

    }
    //method to add sums
    public static int addS(int[] a, int padding){
        int sum = 0;
        for (int i = 0; i < padding/3; i++) {
            sum += a[i+(padding/3)];
        }
        return sum;
    }
    //method to check if the size entered is a power of 3
    public static boolean isPower3(int p){
        double b = Math.log10(p)/Math.log10(3);
        if (b-(int)b == 0) {
            return true;
        }
        else{
            return false;
        }
    }
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.println("Enter amount of coins(must be a power of 3):");
        int size = input.nextInt();
        while(isPower3(size) == false){
            System.out.println("This number is not a power of 3.");
            System.out.println("Enter amount of coins(must be a power of 3):");
            size = input.nextInt();
        }

        int a[] = new int[size];
        for (int i = 0; i < size; i++) {
            a[i] = 0;
        }
        System.out.println("Enter the position where you want to put the heavy counterfeit coin:");
        int pos = input.nextInt();
        while(pos > size){
            System.out.println("Position "+pos+" does not exist in a group of "+size+" coins.");
            System.out.println("Enter the position where you want to put the heavy counterfeit coin:");
            pos = input.nextInt();
        }
        a[pos] = 1;
        System.out.println("What your coins look like (0's are real coins and 1 is the counterfeit coin):");
        for (int i = 0; i < size; i++) {
            System.out.print(a[i]+" ");
        }
        System.out.println("");
        System.out.println("The counterfeit coin is at spot "+heavyCoin(a)+".");
    }
    
}
